% -------------------------------------------------------------------
%  Generated by MATLAB on 29-Feb-2020 12:55:24
%  MATLAB version: 9.7.0.1216025 (R2019b) Update 1
% -------------------------------------------------------------------
                                      

q = [0.2 0.65 1 0.65 0.2 0.15 0.25 0.5 0.25 0.15 0 0 0 0 0];

u = [1 1 1 1 1 0.5 0.5 0.5 0.5 0.5 0 0 0 0 0;
   -1 -0.5 0 0.5 1 -1 -0.5 0 0.5 1 -1 -0.5 0 0.5 1];

c = 1;
epsil = 0.0000001;
step = 10^5;

n = @(v) ((v(1)^2 + v(2)^2))^0.5;

f1 = @(x, y, i) q(i) / (norm([x; y] - u(:,i,:) / norm(u(:,i,:))) + c * (max(q) - q(i)) + epsil);
f2 = @(x, y, i) 1 / (norm([x; y] - u(:,i,:) / norm(u(:,i,:))) + c * (max(q) - q(i)) + epsil);
distance = @(u_value, i, max_q) (norm(u_value - u(:,i,:) / (norm(u(:,i,:)) + epsil)) + c * (max_q - q(i)) + epsil);


[X,Y] = meshgrid(-1:.5:1);
Z = X .* exp(-X.^2 - Y.^2);


for l = 1:size(X, 1)
    throttle = X(1, l);
    for m = 1:size(Y, 1)
        steer = Y(m, 1);

        p1 = 0; % wsum
        for i = 1:15
            value = f1(throttle, steer, i);
            if isnan(value)
                value = 0;
            end
            p1 = p1 + value;
        end

        p2 = 0; % norm
        for i = 1:15
            value = f2(throttle, steer, i);
            if isnan(value)
                value = 0;
            end
            p2 = p2 + value;
        end

        Z(l, m) = p1 / p2;
    end
end

[~, i_chosen] = max(q);
u_chosen = u(:,i_chosen,:);
q_chosen = 0.7; % simulated actual value

q_derivatives = q;
u_derivatives = u;

for k = 1:15
    throttle = u_chosen(1);
    steer = u_chosen(2);
    
    wsum = 0; % wsum
    for i = 1:15
        value = f1(throttle, steer, i);
        if isnan(value)
            value = 0;
        end
        wsum = wsum + value;
    end
    
    normal = 0; % norm
    for i = 1:15
        value = f2(throttle, steer, i);
        if isnan(value)
            value = 0;
        end
        normal = normal + value;
    end
    
    q_k = q(k);
    u_k = u(:,k,:);
    
    d = distance(u_chosen, k, q_chosen);
    
    q_derivative = (normal * (d + q_k * c) - wsum * c) / (normal * d)^2;
    
    u_derivative = ((wsum - normal * q_k) .* 2 .* (u_k - u_chosen)) ./ (normal * d)^2;
    
    q_derivatives(k) = q_derivative;
    u_derivatives(:,k,:) = u_derivative;
    
end

q_derivatives;
u_derivatives;

q2 = q;
u2 = u;
for k=1:15
    q2(k) = q(k) - q_derivatives(k) * step;
    u2(:,k,:) = u(:,k,:) - u_derivatives(:,k,:) .* step;
end
q2(i_chosen) = q_chosen; % (q_chosen .* step + q(i_chosen) .* (1 - step));
u2(:,i_chosen,:) = u_chosen; % (u_chosen .* step + u(:,i_chosen,:) .* (1 - step));
f3 = @(x, y, i) q2(i) / (norm([x; y] - u2(:,i,:) / norm(u2(:,i,:))) + c * (max(q2) - q2(i)) + epsil);
f4 = @(x, y, i) 1 / (norm([x; y] - u2(:,i,:) / norm(u2(:,i,:))) + c * (max(q2) - q2(i)) + epsil);


[X2,Y2] = meshgrid(-1:.5:1);
Z2 = X2 .* exp(-X2.^2 - Y2.^2);
for l = 1:size(X2, 1)
    throttle = X2(1, l);
    for m = 1:size(Y2, 1)
        steer = Y2(m, 1);

        p1 = 0; % wsum
        for i = 1:15
            value = f3(throttle, steer, i);
            if isnan(value)
                value = 0;
            end
            p1 = p1 + value;
        end

        p2 = 0; % norm
        for i = 1:15
            value = f4(throttle, steer, i);
            if isnan(value)
                value = 0;
            end
            p2 = p2 + value;
        end

        Z2(l, m) = value;
    end
end


figure;hold on

% colormap([1 0 0;0 0 1])
hidden off
shading interp;

h = surf(X,Y,Z);
set(h,'edgecolor','interp', 'facecolor', 'none');
xlabel('Throttle');
ylabel('Steering');
zlabel('Quality');
title('Memory of wire-fitted quality on straight');

% g = surf(X2,Y2,Z2);
% set(g,'facecolor','none', 'edgecolor', 'interp');
view(17,22)


